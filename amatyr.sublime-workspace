{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pages",
				"Pages"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "1. Log in to droplet using SSH\n\n\tssh root@107.191.41.140\n\t[enter pass]\n\n2. Install prerequisites\n\n\tsudo apt-get install python-configobj python-serial python-cheetah python-imaging python-psycopg2 python-dev python-pip\n\tsudo pip install pyephem\n\n\tsudo apt-get install libreadline-dev libncurses5-dev libpcre3-dev \\libssl-dev perl make build-essential curl\n\n\tsudo apt-get install libpq-dev libxml2-dev libxslt1-dev libgd-dev libgeoip-dev unzip python-mysqldb\n\n3. Install old Weewx [patch for version 2.1.1, current version 3.7.1]\n\n\twget -O weewx.tar.gz http://sourceforge.net/projects/weewx/files/weewx-2.1.1.tar.gz/download\n\ttar xvfz weewx.tar.gz\n\tcd weewx-2.1.1\n\tsudo ./setup.py install\n\n4. Patch weewx\n\n\tcd /home/weewx\n\twget http://hveem.no/weewx-2.1.1.postgresql.patch ; patch -p1 < weewx-2.1.1.postgresql.patch\n\n5. Install PostgreSQL and create user for weewx\n\t\n\tsudo apt-get update\n\tsudo apt-get install postgresql-9.4 postgresql-server-dev-9.4\n\n\tpsql -U postgres -c \"alter user postgres password 'postgres'\"\n\t[change all auchentication to md5 (from peer)]\n\tnano /etc/postgresql/9.4/main/pg_hba.conf\n\tsudo service postgresql restart\n\n\tsudo -u postgres psql postgres\n\tcreate user weewx with password 'SzechuanSauce' superuser;\n\n6. Configure weewx for posgresql\n\n\tnano weewx.conf\n\t[just set your desired settings]\n\n\t[also in this file we need to add db settings]\n\t[dont touch stats_database, it's not supported by amatyr patch]\n______________________________________________\n[StdArchive]\n\tarchive_database = archive_psql\n\tstats_database = stats_sqlite\n______________________________________________\n[[archive_psql]]\n\thost = localhost\n\tuser = wwex\n\tpassword = SzechuanSauce\n\tdatabase = weewx\n\tdriver = weedb.postgresql\n\n[[stats_psql]]\n\thost = localhost\n\tuser = weewx\n\tpassword = SzechuanSauce\n\tdatabase = stats\n\tdriver = weedb.postgresql\n______________________________________________\n\n7. Create tables in postgres\n\n\tpsql -U weewx -d weewx -a -f /home/amatyr/amatyr.sql\n\n6. Download openresty, check files and extract archive\n\n\t[download main file]\n\twget https://openresty.org/download/openresty-1.11.2.3.tar.gz\n\n\t[filecheck]\n\twget https://openresty.org/download/openresty-1.11.2.3.tar.gz.asc\n\tgpg --keyserver pgpkeys.mit.edu --recv-key A0E98066\n\tgpg openresty-1.11.2.3.tar.gz.asc\n\n\t[extraction]\n\ttar -xvf openresty-1.11.2.3.tar.gz\n\tcd openresty-1.11.2.3\n\n6. Compile and install using command from Amatyr github\n\n\t./configure --with-luajit  --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_realip_module --with-http_stub_status_module --with-http_ssl_module --with-http_sub_module --with-http_xslt_module --with-ipv6 --with-http_postgres_module\n\tmake install\n\n8. Clone git and edit nginx config file\n\n\t[create new directory for git]\n\tsudo mkdir /home/amatyr\n\n\t[download git]\n\tgit clone https://github.com/torhve/Amatyr.git /home/amatyr\n\n\tmv /home/amatyr/etc/config.json.dist /home/amatyr/etc/config.json\n\tnano /home/amatyr/etc/config.json\n\n\t[create nginx conf]\n\trm /home/amatyr/nginx.conf\n\tnano /home/amatyr/nginx.conf\n\t[copy this and save]\n__________________________________\nevents {\n\tworker_connections  1024;\n}\nhttp{\n\tlua_package_path '/home/amatyr/?.lua;;';\n\tcharset utf-8;\n\n\tserver {\n\t\tlisten\t*:80;\n\t\tserver_name 107.191.41.140;\n\t\tlua_code_cache on;\n\t\tset $root /home/amatyr/;\n\t\troot $root;\n\t\taccess_log /home/amatyr/access.log;\n\t\terror_log /home/amatyr/error.log;\n\t\tinclude /usr/local/openresty/nginx/conf/mime.types;\n\n\t\tlocation /api {\n\t\t\tcontent_by_lua_file $root/pgrouter.lua;\n\t\t}\n\t\tlocation /static {\n\t\t\troot $root;\n\t\t}\n\n\t\tlocation / { try_files $uri @lua; }\n\t\tlocation @lua {\n\t\t\tcontent_by_lua_file $root/amatyr.lua;\n\t\t}\n\t}\n}\n__________________________________\n\n9. Add bootstrap and font-awesome.\n\n\tcd /home/amatyr/static\n\twget http://getbootstrap.com/2.3.2/assets/bootstrap.zip\n\tunzip bootstrap.zip\n\trm bootstrap.zip\n\n\twget http://fontawesome.io/assets/font-awesome-4.7.0.zip\n\tunzip font-awesome-4.7.0.zip\n\tmkdir fa\n\tmv font-awesome-4.7.0/* fa/\n\trm font-awesome-4.7.0.zip\n\trm -d font-awesome-4.7.0\n\n\t[change script in index.html]\n\tnano /home/amatyr/index.html\n\t\t[line 290]\n\t\tchange\n\t\t\t<script src=\"/static/js/bootstrap-collapse.js\"></script>\n\t\tto\n\t\t\t<script src=\"/static/bootstrap/js/bootstrap.min.js\"></script>\n\t\t[line 291]\n\t\tremove\n\t\t\t<script src=\"/static/js/bootstrap-tab.js\"></script>\n\t\n\tPATH=/usr/local/openresty/nginx/sbin:$PATH\n\texport PATH\n\tnginx -c /home/amatyr/nginx.conf",
			"settings":
			{
				"buffer_size": 4497,
				"line_ending": "Unix",
				"name": "1. Log in to droplet using SSH"
			}
		},
		{
			"contents": "Hz{9SR1e9poV(%27",
			"settings":
			{
				"buffer_size": 16,
				"line_ending": "Unix",
				"name": "Hz{9SR1e9poV(%27"
			}
		},
		{
			"contents": "---\n-- SQL specific API view\n--\n-- Copyright Tor Hveem <thveem> 2013-2014\n--\n--\nlocal setmetatable = setmetatable\nlocal ngx = ngx\nlocal string = string\nlocal cjson = require \"cjson\"\nlocal mysql = require \"resty.mysql\"\nlocal io = require \"io\"\nlocal assert = assert\nlocal conf\n\nmodule(...)\n\nlocal mt = { __index = _M }\n\nif not conf then\n    local f = assert(io.open(ngx.var.document_root .. \"/etc/config.json\", \"r\"))\n    local c = f:read(\"*all\")\n    f:close()\n\n    conf = cjson.decode(c)\nend\n\nlocal function dbreq(sql)\n    local db, err = mysql:new()\n    db:set_timeout(30000)\n    local ok, err = db:connect(\n        {\n            host=conf.db.host,\n            port=3306,\n            database=conf.db.database,\n            user=conf.db.user,\n            password=conf.db.password\n        })\n    if not ok then\n        ngx.say(err)\n    end\n    --ngx.log(ngx.ERR, '___ SQL ___'..sql)\n    local res, err = db:query(sql)\n    if not res then\n        ngx.log(ngx.ERR, 'Failed SQL query:' ..sql)\n        res = {error=err}\n    end\n    db:set_keepalive(0,10)\n    return cjson.encode(res)\nend\n\n-- Translate front end column names to back end column names\nlocal function column(key)\n    return conf.db.columns[key]\nend\n\nfunction max(match)\n    local key = ngx.req.get_uri_args()['key']\n    if not key then ngx.exit(403) end\n    -- Make sure valid request, only accept plain lowercase ascii string for key name\n    local keytest = ngx.re.match(key, '[a-z]+', 'oj')\n    if not keytest then ngx.exit(403) end\n\n    local sql = [[\n        SELECT\n            DAY(FROM_UNIXTIME(datetime)) AS datetime,\n            MAX(]]..key..[[) AS ]]..key..[[\n        FROM ]]..conf.db.table..[[\n        WHERE YEAR(FROM_UNIXTIME(dateTime)) < 2013\n        GROUP BY 1\n    ]]\n\n    return dbreq(sql)\nend\n\n-- Latest record in db\nfunction now(match)\n    return dbreq([[SELECT\n    *,\n    (\n        SELECT SUM(rain)\n        FROM ]]..conf.db.table..[[\n        WHERE FROM_UNIXTIME(dateTime) >= CURRENT_DATE\n    )\n    AS dayrain\n    FROM ]]..conf.db.table..[[\n    ORDER BY datetime DESC LIMIT 1]])\nend\n\n-- Last 60 samples from db\nfunction recent(match)\n    return dbreq([[SELECT\n    *, DAY(FROM_UNIXTIME(datetime)) as day, FROM_UNIXTIME(datetime) as datetime,\n    (\n        SELECT SUM(b.rain)\n        FROM (\n            SELECT DAY(FROM_UNIXTIME(datetime)) AS bday, rain\n            FROM ]]..conf.db.table..[[\n            ORDER BY datetime DESC\n            LIMIT 60\n        ) AS b\n        WHERE day=bday\n    ) AS dayrain\n    FROM ]]..conf.db.table..[[\n    ORDER BY datetime DESC \n    LIMIT 60]])\nend\n\n-- Helper function to get a start argument and return SQL constrains\nlocal function getDateConstrains(startarg, interval)\n    local where = ''\n    local andwhere = ''\n    if startarg then\n        local start\n        local endpart = \"1 year\"\n        if string.upper(startarg) == 'TODAY' then\n            start = \"CURRENT_DATE\"\n            endpart = \"1 DAY\"\n        elseif string.lower(startarg) == 'yesterday' then\n            start = \"CURRENT_DATE - INTERVAl 1 day\"\n            endpart = '1 day'\n        elseif string.upper(startarg) == '3DAY' then\n            start = \"CURRENT_DATE - INTERVAL 3 day\"\n            endpart = '3 day'\n        elseif string.upper(startarg) == 'WEEK' then\n            start = \"CURRENT_DATE - INTERVAL 1 week\"\n            endpart = '1 week'\n        elseif string.upper(startarg) == '7DAYS' then\n            start = \"CURRENT_DATE - INTERVAL 1 WEEK\"\n            endpart = '1 WEEK'\n        elseif string.upper(startarg) == 'MONTH' then\n            -- old used this month, new version uses last 30 days\n            --start = \"to_date( to_char(current_date,'yyyy-MM') || '-01','yyyy-mm-dd')\"\n            start = \"CURRENT_DATE - INTERVAL 1 MONTH\"\n            endpart = \"1 MONTH\"\n        elseif string.upper(startarg) == 'YEAR' then\n            start = \"CURRENT_DATE - INTERVAL 1 YEAR\"\n            endpart = \"1 year\"\n        elseif string.upper(startarg) == 'ALL' then\n            start = \"DATE '1900-01-01'\" -- Should be old enough :-)\n            endpart = \"200 year\"\n        else\n            start = \"DATE '\" .. startarg .. \"-01-01'\"\n        end\n        -- use interval if provided, if not use the default endpart\n        if not interval then\n            interval = endpart\n        end\n\n        local wherepart = [[\n        (\n            FROM_UNIXTIME(dateTime) BETWEEN ]]..start..[[\n            AND\n            ]]..start..[[ + INTERVAL ]]..endpart..[[\n        )\n        ]]\n        where = 'WHERE ' .. wherepart\n        andwhere = 'AND ' .. wherepart\n    end\n    return where, andwhere\nend\n\n-- Function to return extremeties from database, min/maxes for different time intervals\nfunction record(match)\n\n    local key = match[1]\n    local func = string.upper(match[2])\n    local where, andwhere = getDateConstrains(ngx.req.get_uri_args()['start'])\n    local sql\n\n    -- Special handling for rain since it needs a sum\n    if key == 'dayrain' then\n        -- Not valid with any other value than max\n        sql = [[\n        SELECT\n        DISTINCT FROM_UNIXTIME(datetime) AS datetime,\n        SUM(rain) AS dayrain\n        FROM ]]..conf.db.table..[[\n        ]]..where..[[\n        ORDER BY dayrain DESC\n        LIMIT 1\n        ]]\n    elseif func == 'SUM' then\n        -- The SUM part doesn't need the datetime of the record since the datetime is effectively over the whole scope\n        sql = [[\n            SELECT\n            SUM(]]..key..[[) AS ]]..key..[[\n            FROM ]]..conf.db.table..[[\n            ]]..where..[[\n        ]]\n    else\n        sql = [[\n        SELECT\n            FROM_UNIXTIME(datetime) as datetime,\n            TIMEDIFF(NOW(), FROM_UNIXTIME(datetime)) AS age,\n            ]]..key..[[\n        FROM ]]..conf.db.table..[[\n        WHERE\n        ]]..key..[[ =\n        (\n            SELECT\n                ]]..func..[[(]]..key..[[)\n            FROM ]]..conf.db.table..[[\n            ]]..where..[[\n            LIMIT 1\n        )\n        ]]..andwhere..[[\n        LIMIT 1\n        ]]\n    end\n\n    return dbreq(sql)\nend\n\n--- Return weather data by hour, week, month, year, whatever..\nfunction by_dateunit(match)\n    local unit = 'hour'\n    if match[1] then\n        if match[1] == 'month' then\n            unit = 'day'\n        end\n    elseif ngx.req.get_uri_args()['start'] == 'month' then\n        unit = 'day'\n    end\n    -- get the date constraints\n    local where, andwhere = getDateConstrains(ngx.req.get_uri_args()['start'])\n    local sql = dbreq([[\n    SELECT\n        ]]..unit..[[(FROM_UNIXTIME(datetime)) AS datetime,\n        AVG(outtemp) as outtemp,\n        MIN(outtemp) as tempmin,\n        MAX(outtemp) as tempmax,\n        AVG(dewpoint) as dewpoint,\n        AVG(rain) as rain,\n        MAX(b.dayrain) as dayrain,\n        AVG(windspeed) as windspeed,\n        MAX(windgust) as windgust,\n        AVG(winddir) as winddir,\n        AVG(barometer) as barometer,\n        AVG(outhumidity) as outhumidity,\n        AVG(intemp) as intemp,\n        AVG(inhumidity) as inhumidity,\n        AVG(heatindex) as heatindex,\n        AVG(windchill) as windchill\n    FROM ]]..conf.db.table..[[ as a\n    LEFT OUTER JOIN (\n        SELECT DISTINCT\n            ]]..unit..[[(FROM_UNIXTIME(datetime)) AS unit,\n            (\n                SELECT SUM(rain)\n                FROM (\n                    SELECT DISTINCT ]]..unit..[[(FROM_UNIXTIME(datetime)) AS cunit, rain\n                    FROM ]]..conf.db.table..[[ ]]..where..[[\n                    ORDER BY 1\n                ) as c\n                WHERE unit=cunit\n            ) AS dayrain\n        FROM ]]..conf.db.table..[[ ]]..where..[[\n        ORDER BY 1\n    ) AS b\n    ON a.datetime = b.unit\n    ]]..where..[[\n    GROUP BY 1\n    ORDER BY datetime\n    ]])\n    return sql\nend\n\nfunction day(match)\n    local where, andwhere = getDateConstrains(ngx.req.get_uri_args()['start'])\n    local sql = dbreq([[\n    SET @dr=0;\n    SELECT\n        *, @dr:=@dr+rain AS dayrain\n    FROM ]]..conf.db.table..[[\n    ]]..where..[[\n    ORDER BY datetime\n    ]])\n    return sql\nend\n\nfunction year(match)\n    -- This function generates stats into a new table\n    -- which is updated max once a day\n    -- first it checks the latest record in the stats table\n    -- and if latest date is older than today\n    -- it will recreate the table\n    local year = match[1]\n    local syear = year .. '-01-01'\n    local where = [[\n        WHERE FROM_UNIXTIME(datetime) BETWEEN DATE ']]..syear..[['\n        AND DATE ']]..syear..[[' + INTERVAL 1 year\n    ]]\n\n    local needsupdate = cjson.decode(dbreq[[\n        SELECT\n        MAX(datetime) < (NOW() - INTERVAL 24 hour) AS needsupdate\n        FROM days\n    ]])\n    if needsupdate == ngx.null or needsupdate[1] == nil or needsupdate.error ~= nil then\n        needsupdate = true\n    else\n        if needsupdate[1]['needsupdate'] == 't' then\n            needsupdate = true\n        else\n            needsupdate = false\n        end\n    end\n    if needsupdate then\n        -- Remove existing cache. This could be improved to only add missing data\n        dbreq('DROP TABLE days')\n        -- Create new cached table\n        local gendays = dbreq([[\n        CREATE TABLE days AS\n            SELECT\n                DAY(FROM_UNIXTIME(datetime)) AS datetime,\n                AVG(outtemp) as outtemp,\n                MIN(outtemp) as tempmin,\n                MAX(outtemp) as tempmax,\n                AVG(dewpoint) as dewpoint,\n                AVG(rain) as rain,\n                MAX(b.dayrain) as dayrain,\n                AVG(windspeed) as windspeed,\n                MAX(windgust) as windgust,\n                AVG(winddir) as winddir,\n                AVG(barometer) as barometer,\n                AVG(outhumidity) as outhumidity,\n                AVG(intemp) as intemp,\n                AVG(inhumidity) as inhumidity,\n                AVG(heatindex) as heatindex,\n                AVG(windchill) as windchill\n            FROM ]]..conf.db.table..[[ AS a\n            LEFT OUTER JOIN\n            (\n                SELECT\n                    DISTINCT DAY(FROM_UNIXTIME(datetime)) AS hour,\n                    SUM(rain) AS dayrain\n                    FROM ]]..conf.db.table..[[ ORDER BY 1\n            ) AS b\n            ON a.datetime = b.hour\n            GROUP BY 1\n            ORDER BY datetime\n            ]])\n    end\n    local sql = [[\n        SELECT *\n        FROM days\n        ]]..where\n    return dbreq(sql)\nend\n\nfunction windhist(match)\n    local where, andwhere = getDateConstrains(ngx.req.get_uri_args()['start'])\n    return dbreq([[\n        SELECT count(*) as count, ((winddir/10)*10)+0 as d, avg(windspeed)*1.94384449 as avg\n        FROM ]]..conf.db.table..[[\n        ]]..where..[[\n        GROUP BY 2\n        ORDER BY 2\n    ]])\nend\n\nlocal class_mt = {\n    -- to prevent use of casual module global variables\n    __newindex = function (table, key, val)\n        ngx.log(ngx.ERR, 'attempt to write to undeclared variable \"' .. key .. '\"')\n    end\n}\n\nsetmetatable(_M, class_mt)",
			"file": "/home/anoran/api.lua",
			"file_size": 10884,
			"file_write_time": 131381318250515746,
			"settings":
			{
				"buffer_size": 10893,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 92.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/amatyr/amatyr.sublime-workspace",
		"/home/amatyr/amatyr.sublime-project",
		"/home/anoran/Downloads/difference1.txt",
		"/var/node/tic-tac-toe/webpack.config.babel.js",
		"/var/node/ESO/node_modules/vxx/index.js",
		"/var/node/ESO/src/shared/components/pages.js",
		"/var/node/ESO/src/server/routing.js",
		"/home/anoran/Downloads/weewx-2.1.1.postgresql.patch",
		"/home/anoran/Downloads/weewx-2.1.1.postgresql (1).patch",
		"/var/node/ESO/src/client/.htaccess",
		"/var/node/ESO/src/client/index.jsx",
		"/var/node/ESO/src/shared/constants.js",
		"/var/node/ESO/src/shared/components/footer.jsx",
		"/var/node/ESO/src/shared/app.js",
		"/var/node/ESO/src/server/render-app.jsx",
		"/var/node/ESO/src/server/index.jsx",
		"/var/node/ESO/src/server/init-store.js",
		"/var/node/tic-tac-toe/src/server/render-app.jsx",
		"/var/node/ESO/webpack.config.babel.js",
		"/var/node/ESO/package.json",
		"/var/node/XO/src/server/render-app.jsx",
		"/var/node/ESO/ESO.sublime-workspace",
		"/var/node/XO/src/shared/components/pages.js",
		"/var/node/XO/src/server/routing.js",
		"/var/node/XO/src/shared/constants.js",
		"/var/node/XO/src/server/index.jsx",
		"/var/node/XO/src/server/init-store.js",
		"/var/node/XO/package.json",
		"/var/node/XO/src/shared/components/page/home.jsx",
		"/var/node/XO/webpack.config.babel.js",
		"/var/node/XO/src/constants.js",
		"/var/node/XO/src/containers/game.jsx",
		"/var/node/XO/src/reducers/game.js",
		"/var/node/XO/src/index.jsx",
		"/var/node/XO/src/init-store.js",
		"/var/node/XO/src/components/tile.jsx",
		"/var/node/XO/src/components/board.jsx",
		"/var/node/XO/src/app.js",
		"/var/node/tic-tac-toe/src/server/index.js",
		"/var/node/XO/XO.sublime-project",
		"/var/node/XO/src/shared/action/hello.js",
		"/var/node/XO/src/shared/container/message-async.js",
		"/var/node/XO/src/shared/container/hello-async-button.js",
		"/var/node/XO/src/server/index.js",
		"/var/node/XO/src/shared/app.jsx",
		"/var/node/XO/src/shared/container/message.js",
		"/var/node/XO/src/shared/container/hello-button.js",
		"/var/node/XO/src/shared/component/message.jsx",
		"/var/node/XO/src/shared/component/button.jsx",
		"/var/node/XO/src/shared/reducer/hello.js",
		"/var/node/XO/src/shared/routes.js",
		"/var/node/XO/src/shared/config.js",
		"/var/node/XO/src/client/index.jsx",
		"/var/node/XO/src/shared/util.js",
		"/var/node/XO/.babelrc",
		"/var/node/XO/src/server/render-app.js",
		"/var/node/XO/src/client/index.js",
		"/var/node/XO/src/index.js",
		"/var/node/XO/public/css/style.css",
		"/var/node/XO/src/dog.js",
		"/var/node/tic-tac-toe/package.json",
		"/var/node/tic-tac-toe/tic-tac-toe.sublime-project",
		"/var/node/tic-tac-toe/.babelrc",
		"/home/anoran/.config/sublime-text-3/Packages/User/ESLint.sublime-settings",
		"/var/node/tic-tac-toe/src/shared/util.js",
		"/var/node/tic-tac-toe/.eslintrc.json",
		"/var/node/tic-tac-toe/src/client/index.js",
		"/var/node/tic-tac-toe/src/shared/config.js",
		"/var/node/tic-tac-toe/public/css/style.css",
		"/var/node/tic-tac-toe/src/server/render-app.js",
		"/var/node/tic-tac-toe/.gitignore",
		"/var/node/tic-tac-toe/src/dog.js",
		"/var/node/tic-tac-toe/src/index.js",
		"/var/node/src/.babelrc",
		"/var/node/index.js",
		"/var/node/.gitignore"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"",
			".",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"over",
			"+ interval",
			"date ",
			"01-01",
			"date ",
			"date",
			"dayrain",
			"windd",
			"date_tr",
			"dayrain",
			"+ inter",
			"unit",
			"+ int",
			"interval",
			"'1 day'",
			"sum(ra",
			"dbreq",
			"view",
			"\"",
			"odbreq",
			"pg",
			"/root",
			"root",
			"git",
			"src/constants",
			"reducers/game",
			"/'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			" ",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4497,
						"regions":
						{
						},
						"selection":
						[
							[
								2939,
								2939
							]
						],
						"settings":
						{
							"auto_name": "1. Log in to droplet using SSH",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1125.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16,
						"regions":
						{
						},
						"selection":
						[
							[
								16,
								16
							]
						],
						"settings":
						{
							"auto_name": "Hz{9SR1e9poV(%27",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/anoran/api.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10893,
						"regions":
						{
						},
						"selection":
						[
							[
								10484,
								10484
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4878.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/ESLint/ESLint.sublime-build",
	"project": "ESO.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
